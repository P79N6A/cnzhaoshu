{"remainingRequest":"D:\\zhaoshu\\admin\\iview-admin\\node_modules\\thread-loader\\dist\\cjs.js!D:\\zhaoshu\\admin\\iview-admin\\node_modules\\babel-loader\\lib\\index.js!D:\\zhaoshu\\admin\\iview-admin\\node_modules\\eslint-loader\\index.js??ref--13-0!D:\\zhaoshu\\admin\\iview-admin\\src\\libs\\util.js","dependencies":[{"path":"D:\\zhaoshu\\admin\\iview-admin\\src\\libs\\util.js","mtime":1536829744208},{"path":"D:\\zhaoshu\\admin\\iview-admin\\.babelrc","mtime":1536565681652},{"path":"D:\\zhaoshu\\admin\\iview-admin\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1536566309539},{"path":"D:\\zhaoshu\\admin\\iview-admin\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\zhaoshu\\admin\\iview-admin\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"D:\\zhaoshu\\admin\\iview-admin\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es6.object.assign\";\nimport _toConsumableArray from \"D:\\\\zhaoshu\\\\admin\\\\iview-admin\\\\node_modules\\\\@babel\\\\runtime/helpers/builtin/es6/toConsumableArray\";\nimport \"core-js/modules/es6.function.name\";\nimport Cookies from 'js-cookie'; // cookie保存的天数\n\nimport $qs from 'qs';\nimport config from '@/config';\nimport { forEach, hasOneOf, objEqual } from '@/libs/tools';\nexport var TOKEN_KEY = 'token';\nexport var setToken = function setToken(token) {\n  Cookies.set(TOKEN_KEY, token, {\n    expires: config.cookieExpires || 7\n  });\n};\nexport var getToken = function getToken() {\n  var token = Cookies.get(TOKEN_KEY);\n  if (token) return token;else return false;\n};\nexport var hasChild = function hasChild(item) {\n  return item.children && item.children.length !== 0;\n};\n\nvar showThisMenuEle = function showThisMenuEle(item, access) {\n  if (item.meta && item.meta.access && item.meta.access.length) {\n    if (hasOneOf(item.meta.access, access)) return true;else return false;\n  } else return true;\n};\n/**\n * @param {Array} list 通过路由列表得到菜单列表\n * @returns {Array}\n */\n\n\nexport var getMenuByRouter = function getMenuByRouter(list, access) {\n  var res = [];\n  forEach(list, function (item) {\n    if (!item.meta || item.meta && !item.meta.hideInMenu) {\n      var obj = {\n        icon: item.meta && item.meta.icon || '',\n        name: item.name,\n        meta: item.meta\n      };\n\n      if ((hasChild(item) || item.meta && item.meta.showAlways) && showThisMenuEle(item, access)) {\n        obj.children = getMenuByRouter(item.children, access);\n      }\n\n      if (item.meta && item.meta.href) obj.href = item.meta.href;\n      if (showThisMenuEle(item, access)) res.push(obj);\n    }\n  });\n  return res;\n};\n/**\n * @param {Array} routeMetched 当前路由metched\n * @returns {Array}\n */\n\nexport var getBreadCrumbList = function getBreadCrumbList(routeMetched, homeRoute) {\n  var res = routeMetched.filter(function (item) {\n    return item.meta === undefined || !item.meta.hide;\n  }).map(function (item) {\n    var obj = {\n      icon: item.meta && item.meta.icon || '',\n      name: item.name,\n      meta: item.meta\n    };\n    return obj;\n  }); //顶部标签是否也展示routrt内配置hideInMenu为true的列表\n\n  res = res.filter(function (item) {\n    return !item.meta.hideInMenu;\n  });\n  return [Object.assign(homeRoute, {\n    to: homeRoute.path\n  })].concat(_toConsumableArray(res));\n};\nexport var showTitle = function showTitle(item, vm) {\n  return vm.$config.useI18n ? vm.$t(item.name) : item.meta && item.meta.title || item.name;\n};\n/**\n * @description 本地存储和获取标签导航列表\n */\n\nexport var setTagNavListInLocalstorage = function setTagNavListInLocalstorage(list) {\n  localStorage.tagNaveList = JSON.stringify(list);\n};\n/**\n * @returns {Array} 其中的每个元素只包含路由原信息中的name, path, meta三项\n */\n\nexport var getTagNavListFromLocalstorage = function getTagNavListFromLocalstorage() {\n  var list = localStorage.tagNaveList;\n  return list ? JSON.parse(list) : [];\n};\n/**\n * @param {Array} routers 路由列表数组\n * @description 用于找到路由列表中name为home的对象\n */\n\nexport var getHomeRoute = function getHomeRoute(routers) {\n  var i = -1;\n  var len = routers.length;\n  var homeRoute = {};\n\n  while (++i < len) {\n    var item = routers[i];\n\n    if (item.children && item.children.length) {\n      var res = getHomeRoute(item.children);\n      if (res.name) return res;\n    } else {\n      if (item.name === 'home') homeRoute = item;\n    }\n  }\n\n  return homeRoute;\n};\n/**\n * @param {*} list 现有标签导航列表\n * @param {*} newRoute 新添加的路由原信息对象\n * @description 如果该newRoute已经存在则不再添加\n */\n\nexport var getNewTagList = function getNewTagList(list, newRoute) {\n  var name = newRoute.name,\n      path = newRoute.path,\n      meta = newRoute.meta;\n\n  var newList = _toConsumableArray(list);\n\n  if (newList.findIndex(function (item) {\n    return item.name === name;\n  }) >= 0) return newList;else newList.push({\n    name: name,\n    path: path,\n    meta: meta\n  });\n  return newList;\n};\n/**\n * @param {*} access 用户权限数组，如 ['super_admin', 'admin']\n * @param {*} route 路由列表\n */\n\nvar hasAccess = function hasAccess(access, route) {\n  if (route.meta && route.meta.access) return hasOneOf(access, route.meta.access);else return true;\n};\n/**\n * 权鉴\n * @param {*} name 即将跳转的路由name\n * @param {*} access 用户权限数组\n * @param {*} routes 路由列表\n * @description 用户是否可跳转到该页\n */\n\n\nexport var canTurnTo = function canTurnTo(name, access, routes) {\n  var routePermissionJudge = function routePermissionJudge(list) {\n    return list.some(function (item) {\n      if (item.children && item.children.length) {\n        return routePermissionJudge(item.children);\n      } else if (item.name === name) {\n        return hasAccess(access, item);\n      }\n    });\n  };\n\n  return routePermissionJudge(routes);\n};\n/**\n * @param {String} url\n * @description 从URL中解析参数\n */\n\nexport var getParams = function getParams(url) {\n  var keyValueArr = url.split('?')[1].split('&');\n  var paramObj = {};\n  keyValueArr.forEach(function (item) {\n    var keyValue = item.split('=');\n    paramObj[keyValue[0]] = keyValue[1];\n  });\n  return paramObj;\n};\n/**\n * @param {Array} list 标签列表\n * @param {String} name 当前关闭的标签的name\n */\n\nexport var getNextRoute = function getNextRoute(list, route) {\n  var res = {};\n\n  if (list.length === 2) {\n    res = getHomeRoute(list);\n  } else {\n    var index = list.findIndex(function (item) {\n      return routeEqual(item, route);\n    });\n    if (index === list.length - 1) res = list[list.length - 2];else res = list[index + 1];\n  }\n\n  return res;\n};\n/**\n * @param {Number} times 回调函数需要执行的次数\n * @param {Function} callback 回调函数\n */\n\nexport var doCustomTimes = function doCustomTimes(times, callback) {\n  var i = -1;\n\n  while (++i < times) {\n    callback(i);\n  }\n};\n/**\n * @param {Object} file 从上传组件得到的文件对象\n * @returns {Promise} resolve参数是解析后的二维数组\n * @description 从Csv文件中解析出表格，解析成二维数组\n */\n\nexport var getArrayFromFile = function getArrayFromFile(file) {\n  var nameSplit = file.name.split('.');\n  var format = nameSplit[nameSplit.length - 1];\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n    reader.readAsText(file); // 以文本格式读取\n\n    var arr = [];\n\n    reader.onload = function (evt) {\n      var data = evt.target.result; // 读到的数据\n\n      var pasteData = data.trim();\n      arr = pasteData.split(/[\\n\\u0085\\u2028\\u2029]|\\r\\n?/g).map(function (row) {\n        return row.split('\\t');\n      }).map(function (item) {\n        return item[0].split(',');\n      });\n      if (format === 'csv') resolve(arr);else reject(new Error('[Format Error]:你上传的不是Csv文件'));\n    };\n  });\n};\n/**\n * @param {Array} array 表格数据二维数组\n * @returns {Object} { columns, tableData }\n * @description 从二维数组中获取表头和表格数据，将第一行作为表头，用于在iView的表格中展示数据\n */\n\nexport var getTableDataFromArray = function getTableDataFromArray(array) {\n  var columns = [];\n  var tableData = [];\n\n  if (array.length > 1) {\n    var titles = array.shift();\n    columns = titles.map(function (item) {\n      return {\n        title: item,\n        key: item\n      };\n    });\n    tableData = array.map(function (item) {\n      var res = {};\n      item.forEach(function (col, i) {\n        res[titles[i]] = col;\n      });\n      return res;\n    });\n  }\n\n  return {\n    columns: columns,\n    tableData: tableData\n  };\n};\nexport var findNodeUpper = function findNodeUpper(ele, tag) {\n  if (ele.parentNode) {\n    if (ele.parentNode.tagName === tag.toUpperCase()) {\n      return ele.parentNode;\n    } else {\n      return findNodeUpper(ele.parentNode, tag);\n    }\n  }\n};\nexport var findNodeDownward = function findNodeDownward(ele, tag) {\n  var tagName = tag.toUpperCase();\n\n  if (ele.childNodes.length) {\n    var i = -1;\n    var len = ele.childNodes.length;\n\n    while (++i < len) {\n      var child = ele.childNodes[i];\n      if (child.tagName === tagName) return child;else return findNodeDownward(child, tag);\n    }\n  }\n};\nexport var showByAccess = function showByAccess(access, canViewAccess) {\n  return hasOneOf(canViewAccess, access);\n};\n/**\n * @description 根据name/params/query判断两个路由对象是否相等\n * @param {*} route1 路由对象\n * @param {*} route2 路由对象\n */\n\nexport var routeEqual = function routeEqual(route1, route2) {\n  var params1 = route1.params || {};\n  var params2 = route2.params || {};\n  var query1 = route1.query || {};\n  var query2 = route2.query || {};\n  return route1.name === route2.name;\n  /*&& objEqual(params1, params2) && objEqual(query1, query2)*/\n\n  /*解决选中问题后续触发问题不清楚*/\n};\n/**\n * 判断打开的标签列表里是否已存在这个新添加的路由对象\n */\n\nexport var routeHasExist = function routeHasExist(tagNavList, routeItem) {\n  var len = tagNavList.length;\n  var res = false;\n  doCustomTimes(len, function (index) {\n    if (routeEqual(tagNavList[index], routeItem)) res = true;\n  });\n  return res;\n};\n/**\n * 拼接axiosBUG需要的data数据\n */\n\nexport var getAxiosData = function getAxiosData(res) {\n  if (!res) return {};\n  return $qs.stringify(res);\n};\n/**\n * removeTagsNav JS去除顶部标签\n */\n\nexport var getRemoveagsNav = function getRemoveagsNav(navList, name) {\n  navList = navList.filter(function (item) {\n    return item.name != name;\n  });\n  return navList;\n};",null]}